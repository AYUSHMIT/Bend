type Bool:
  True
  False

type Tree = (node ~lft ~rgt) | (leaf val)

def tree_xor(tree):
  fold tree:
    case Tree/node:
      return xor(tree.lft, tree.rgt);
    case Tree/leaf:
      return tree.val;

(xor Bool/True Bool/False) = Bool/True
(xor Bool/False Bool/True) = Bool/True
(xor * *) = Bool/False

main =
  let depth = 10
  let tree = bend n = 0 {
    when (< n depth):
      (Tree/node (fork (+ n 1)) (fork (+ n 1)))
    else:
      if (% n 2) { (Tree/leaf Bool/True) } else { (Tree/leaf Bool/False) }
  }
  (tree_xor tree)
